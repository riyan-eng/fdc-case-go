definitions:
  dto.AuthLogin:
    properties:
      password:
        format: password
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.AuthRefresh:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  dto.AuthRegister:
    properties:
      email:
        format: email
        type: string
      password:
        format: password
        minLength: 8
        type: string
      username:
        minLength: 5
        type: string
    required:
    - email
    - password
    - username
    type: object
  dto.ExampleCreate:
    properties:
      detail:
        type: string
      name:
        minLength: 3
        type: string
    required:
    - name
    type: object
  dto.ExamplePatch:
    properties:
      detail:
        type: string
      name:
        minLength: 3
        type: string
    type: object
  dto.ExamplePut:
    properties:
      detail:
        type: string
      name:
        minLength: 3
        type: string
    required:
    - name
    type: object
  util.ErrorResponse:
    properties:
      errors: {}
      message:
        example: Failed to display data.
        type: string
      response:
        $ref: '#/definitions/util.ErrorResponseChild'
    type: object
  util.ErrorResponseChild:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: Bad Request
        type: string
      request_id:
        example: 8d0dc325-9fa4-430a-a46f-2042140c81ff
        type: string
    type: object
  util.SuccessResponse:
    properties:
      data: {}
      message:
        example: Successfully display data.
        type: string
      meta: {}
      response:
        $ref: '#/definitions/util.SuccessResponseChild'
    type: object
  util.SuccessResponseChild:
    properties:
      code:
        example: 200
        type: integer
      message:
        example: OK
        type: string
      request_id:
        example: 8d0dc325-9fa4-430a-a46f-2042140c81ff
        type: string
    type: object
info:
  contact:
    name: hertz-contrib
    url: https://github.com/hertz-contrib
  description: This is a FDC Api Documentation.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: FDC
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.AuthLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Login
      tags:
      - Authentication
  /auth/logout:
    delete:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Logout
      tags:
      - Authentication
  /auth/me:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Me
      tags:
      - Authentication
  /auth/refresh:
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.AuthRefresh'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Refresh
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.AuthRegister'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Register
      tags:
      - Authentication
  /example:
    get:
      parameters:
      - description: search
        in: query
        name: search
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: per_page
        in: query
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: List
      tags:
      - Example
    post:
      consumes:
      - application/json
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.ExampleCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Create
      tags:
      - Example
  /example/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Delete
      tags:
      - Example
    get:
      consumes:
      - application/json
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Detail
      tags:
      - Example
    patch:
      consumes:
      - application/json
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.ExamplePatch'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Patch
      tags:
      - Example
    put:
      consumes:
      - application/json
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.ExamplePut'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Put
      tags:
      - Example
  /object:
    post:
      parameters:
      - description: File
        in: formData
        name: file
        required: true
        type: file
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Upload
      tags:
      - Object
  /object/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: Remove
      tags:
      - Object
  /object/{id}/{name}:
    get:
      consumes:
      - application/json
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      - description: fill with random
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/util.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/util.ErrorResponse'
      summary: View
      tags:
      - Object
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
